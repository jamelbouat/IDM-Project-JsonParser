/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.idmproject.tests;

import com.google.inject.Inject;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.idmproject.jsonParser.JsonModel;
import org.xtext.example.idmproject.tests.JavaCompiler;
import org.xtext.example.idmproject.tests.JavaInterpreter;
import org.xtext.example.idmproject.tests.JsonParserInjectorProvider;
import org.xtext.example.idmproject.tests.PythonCompiler;

@ExtendWith(InjectionExtension.class)
@InjectWith(JsonParserInjectorProvider.class)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SuppressWarnings("all")
public class JsonParserParsingTest {
  @Inject
  private ParseHelper<JsonModel> parseHelper;
  
  /**
   * On va utiliser des tests sur les outputs pour bien verifier que nos sorties et erreurs des compilateurs python java et de l'interpreteur java soit les mêmes
   */
  private ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  
  private ByteArrayOutputStream errContent = new ByteArrayOutputStream();
  
  /**
   * On garde de coté les Flux originaux de sortie pour rediriger ceux de nos tests vers ceux ci dessus
   */
  private PrintStream originalOut = System.out;
  
  private PrintStream originalErr = System.err;
  
  private PythonCompiler pythonCompiler;
  
  private JavaCompiler javaCompiler;
  
  private JavaInterpreter javaInterpreter;
  
  @BeforeEach
  public void setUpStreams() {
    PrintStream _printStream = new PrintStream(this.outContent);
    System.setOut(_printStream);
    PrintStream _printStream_1 = new PrintStream(this.errContent);
    System.setErr(_printStream_1);
  }
  
  @BeforeEach
  public void setUp() {
    try {
      final PrintWriter prw = new PrintWriter("file.json");
      prw.println("{\"key1\" : \"value1\"}");
      prw.close();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @AfterEach
  public void restoreStreams() {
    System.setOut(this.originalOut);
    System.setErr(this.originalErr);
  }
  
  /**
   * Premier test , juste le load, on attends rien en sortie et aucune erreur
   */
  @Test
  @Order(1)
  public void loadBaseFile() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(2)
  public void selectData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append("expr id1 =.select(\"key1\")");
      _builder.newLine();
      _builder.append("expr id2 =.select(\"key1\")");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
      Assertions.assertTrue(this.javaCompiler.getVars().contains("id1"));
      Assertions.assertTrue(this.javaCompiler.getVars().contains("id2"));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(3)
  public void storeData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append(".store(\"newFile1.json\")");
      _builder.newLine();
      _builder.append(".store(\"newFile2.json\")");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(4)
  public void insertData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append(".insert(\"newKey1\",\"\\\"newValue1\\\"\")");
      _builder.newLine();
      _builder.append(".insert(\"newKey2\",\"\\\"newValue2\\\"\")");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(5)
  public void printData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append(".print(\"key1\")");
      _builder.newLine();
      _builder.append(".print(\"key2\")");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(6)
  public void updateData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append(".update(\"key1\",\"\\\"updatedValue1\\\"\")");
      _builder.newLine();
      _builder.append(".update(\"key2\",\"\\\"updatedValue2\\\"\")");
      _builder.newLine();
      _builder.append(".save()");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(7)
  public void computeData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append(".insert(\"key3\",\"2\")");
      _builder.newLine();
      _builder.append(".insert(\"key4\",\"3\")");
      _builder.newLine();
      _builder.append(".sum(\"key3\" + \"key4\")");
      _builder.newLine();
      _builder.append(".product(\"key3\" * \"key4\")");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  @Order(8)
  public void saveData() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(".load(\"file.json\")");
      _builder.newLine();
      _builder.append(".save()");
      _builder.newLine();
      final JsonModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      this.computeAndAssertOutAreAlike(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public void computeAndAssertOutAreAlike(final JsonModel result) {
    try {
      PythonCompiler _pythonCompiler = new PythonCompiler(result);
      this.pythonCompiler = _pythonCompiler;
      this.pythonCompiler.compileAndRun();
      final String pythonCompilerOut = this.outContent.toString();
      final String pythonCompilerErr = this.errContent.toString();
      this.outContent.flush();
      ByteArrayOutputStream _byteArrayOutputStream = new ByteArrayOutputStream();
      this.outContent = _byteArrayOutputStream;
      this.setUpStreams();
      JavaCompiler _javaCompiler = new JavaCompiler(result);
      this.javaCompiler = _javaCompiler;
      this.javaCompiler.compileAndRun();
      final String javaCompilerOut = this.outContent.toString();
      final String javaCompilerErr = this.errContent.toString();
      this.outContent.flush();
      ByteArrayOutputStream _byteArrayOutputStream_1 = new ByteArrayOutputStream();
      this.outContent = _byteArrayOutputStream_1;
      this.setUpStreams();
      JavaInterpreter _javaInterpreter = new JavaInterpreter(result);
      this.javaInterpreter = _javaInterpreter;
      this.javaInterpreter.interpretAndRun();
      final String javaInterpreterOut = this.outContent.toString();
      final String javaInterpreterErr = this.errContent.toString();
      this.outContent.flush();
      ByteArrayOutputStream _byteArrayOutputStream_2 = new ByteArrayOutputStream();
      this.outContent = _byteArrayOutputStream_2;
      this.setUpStreams();
      this.originalOut.println(("python compiler : " + pythonCompilerOut));
      this.originalOut.println(("java compiler : " + javaCompilerOut));
      this.originalOut.println(("java interpreter : " + javaInterpreterOut));
      Assertions.assertEquals(pythonCompilerOut, javaCompilerOut);
      Assertions.assertEquals(pythonCompilerOut, javaInterpreterOut);
      Assertions.assertEquals(javaCompilerOut, javaInterpreterOut);
      Assertions.assertEquals(pythonCompilerErr, javaCompilerErr);
      Assertions.assertEquals(pythonCompilerErr, javaInterpreterErr);
      Assertions.assertEquals(javaCompilerErr, javaInterpreterErr);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
