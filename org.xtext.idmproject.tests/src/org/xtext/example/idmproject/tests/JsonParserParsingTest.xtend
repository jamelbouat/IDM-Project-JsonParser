/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.idmproject.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.idmproject.jsonParser.JsonModel
import org.junit.jupiter.api.Order
import org.junit.jupiter.api.Disabled

@ExtendWith(InjectionExtension)
@InjectWith(JsonParserInjectorProvider)
class JsonParserParsingTest {
	@Inject
	ParseHelper<JsonModel> parseHelper
	
	@Test
	@Order(1)
	def void loadBaseFile() {
		val result = parseHelper.parse('''
			.load("file.json")
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val PythonCompiler cmpPython = new PythonCompiler(result)
		cmpPython.compileAndRun
		
//		val JavaCompiler cmplJava = new JavaCompiler(result)
//		cmplJava.compileAndRun	
	}
	
	@Test
	@Order(2)
	def void storeData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.store("newFile.json")
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val PythonCompiler cmpPython = new PythonCompiler(result)
		cmpPython.compileAndRun	
	}
	
	@Test
	@Order(3)
	def void insertData() {
		val value = "newKey" + " : " + "newValue";
		val result = parseHelper.parse('''
			.load("file.json")
			.insert("prevKey","""newKey" : "newValue")
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
//		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val PythonCompiler cmpPython = new PythonCompiler(result)
		cmpPython.compileAndRun	
	}
}
