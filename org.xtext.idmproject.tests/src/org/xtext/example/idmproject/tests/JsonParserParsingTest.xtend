/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.idmproject.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.idmproject.jsonParser.JsonModel
import org.junit.jupiter.api.Order
import org.junit.jupiter.api.TestMethodOrder
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Disabled
import java.io.ByteArrayOutputStream
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.AfterEach
import java.io.PrintStream
import java.io.PrintWriter
import java.util.List
import java.io.BufferedReader
import java.util.ArrayList
import java.io.FileReader
import java.util.Arrays
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.TestInstance
import org.junit.jupiter.api.RepeatedTest

@ExtendWith(InjectionExtension)
@InjectWith(JsonParserInjectorProvider)
@TestMethodOrder(OrderAnnotation)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class JsonParserParsingTest {
	@Inject
	ParseHelper<JsonModel> parseHelper 
	/* On va utiliser des tests sur les outputs pour bien verifier que nos sorties et erreurs des compilateurs python java et de l'interpreteur java soit les mêmes*/
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	ByteArrayOutputStream errContent = new ByteArrayOutputStream();
	/*On garde de coté les Flux originaux de sortie pour rediriger ceux de nos tests vers ceux ci dessus */
	PrintStream originalOut = System.out;
	PrintStream originalErr = System.err;
	PythonCompiler pythonCompiler;
	JavaCompiler javaCompiler;
	JavaInterpreter javaInterpreter;
	BenchmarkProgram benchmarkProgram
	
	@BeforeAll
	def void setBenchmark() {
		benchmarkProgram = new BenchmarkProgram();
	}
	
	@BeforeEach
	def void setUpStreams() {
	    System.setOut(new PrintStream(outContent));
	    System.setErr(new PrintStream(errContent));
	}
	
	@BeforeEach
	def void setUp() {
	    val PrintWriter prw= new PrintWriter("file.json");
      	prw.println('{"key1" : "value1"}');          
      	prw.close();
	}
	
	@AfterEach
	def void restoreStreams() {
	    System.setOut(originalOut);
	    System.setErr(originalErr);
	}
	
	@AfterAll
	def void callIt() {
		benchmarkProgram.calculateExecutionTimesAndInsertTabularDataToFile();
	}

	/* Premier test , juste le load, on attends rien en sortie et aucune erreur */
	@Test
	@RepeatedTest(4)
	@Order(1)
	def void loadBaseFile() {
		val result = parseHelper.parse('''
			.load("file.json")
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load");
	}
	
	@Test
	@RepeatedTest(4)
	@Order(2)
	def void selectData() {
		val result = parseHelper.parse('''
			.load("file.json")
			expr id1 =.select("key1")
			expr id2 =.select("key1")
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & select");
		
		/* On test que la variable est bien ajouté dans les variables stockées */
		Assertions.assertTrue(javaCompiler.vars.contains("id1"))
		Assertions.assertTrue(javaCompiler.vars.contains("id2"))
	}

	@Test
	@RepeatedTest(4)
	@Order(3)
	def void storeData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.store("newFile1.json")
			.store("newFile2.json")
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & store");
	}
	
	@Test
	@RepeatedTest(4)
	@Order(4)
	def void insertData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.insert("newKey1","\"newValue1\"")
			.insert("newKey2","\"newValue2\"")
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & insert");
	}
	
	@Test
	@RepeatedTest(4)
	@Order(5)
	def void printData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.print("key1")
			.print("key2")
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & print");	
	}
	
	@Test
	@RepeatedTest(4)
	@Order(6)
	def void updateData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.update("key1","\"updatedValue1\"")
			.update("key2","\"updatedValue2\"")
			.save()
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & update & save");
	}
	
	@Test
	@RepeatedTest(4)
	@Order(7)
	def void computeData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.insert("key3","2")
			.insert("key4","3")
			.sum("key3" + "key4")
			.product("key3" * "key4")
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & insert & sum & product");
	}
	
	@Test
	@RepeatedTest(4)
	@Order(8)
	def void saveData() {
		val result = parseHelper.parse('''
			.load("file.json")
			.save()
		''')
		
		runAssetionsOnCompilersAndInterpreter(result, "load & save");
	}
	
	@Test
	@RepeatedTest(4)
	@Order(9)
	def void exportDataToCsv() {
		val result = parseHelper.parse('''
			.load("file.json")
			.insert("key3","2")
			.insert("key4","3")
			.export("newFile.csv")
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val pythonCompilerOut = pythonCompilerComputeAndAssertOutAreAlike(result, "load & insert & export");
		reInitStream
		val List<List<String>> csvWithPythonCompiler = getCsvToString("newFile.csv"); 
		
		val javaCompilerOut = javaCompilerComputeAndAssertOutAreAlike(result, "load & insert & export");
		reInitStream
		val List<List<String>> csvWithJavaCompiler = getCsvToString("newFile.csv"); 
		
		val javaInterpreterOut = javaInterpreterComputeAndAssertOutAreAlike(result, "load & insert & export");
		reInitStream
		val List<List<String>> csvWithJavaInterpreter = getCsvToString("newFile.csv"); 
		
		originalOut.println(javaInterpreterOut)
		Assertions.assertEquals(pythonCompilerOut,javaCompilerOut);
		Assertions.assertEquals(pythonCompilerOut,javaInterpreterOut);
		Assertions.assertEquals(javaCompilerOut,javaInterpreterOut);		

		Assertions.assertEquals(csvWithPythonCompiler,csvWithJavaCompiler);
		Assertions.assertEquals(csvWithJavaCompiler,csvWithJavaInterpreter);
		Assertions.assertEquals(csvWithPythonCompiler,csvWithJavaInterpreter);		
	}
	
	def runAssetionsOnCompilersAndInterpreter(JsonModel result, String operation) {
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val pythonCompilerOut = pythonCompilerComputeAndAssertOutAreAlike(result, operation);
		reInitStream
		
		val javaCompilerOut = javaCompilerComputeAndAssertOutAreAlike(result, operation);
		reInitStream
		
		val javaInterpreterOut = javaInterpreterComputeAndAssertOutAreAlike(result, operation);
		reInitStream
	
		Assertions.assertEquals(pythonCompilerOut,javaCompilerOut);
		Assertions.assertEquals(pythonCompilerOut,javaInterpreterOut);
		Assertions.assertEquals(javaCompilerOut,javaInterpreterOut);	
	}
	
	def void reInitStream()	{
		/*Les lignes suivantes servent a vider le contenu pour ne pas garder celui d'avant lors de la comparaison */
		outContent.flush
		outContent = new ByteArrayOutputStream();
		setUpStreams
	}
	
	def String pythonCompilerComputeAndAssertOutAreAlike(JsonModel result, String operation){
		/*On assigne un nouveau compilateur ou interpreteur */
		pythonCompiler = new PythonCompiler(result)
		
		val startTimePy = System.nanoTime;
		pythonCompiler.compileAndRun
		val durationPy = System.nanoTime - startTimePy;
		benchmarkProgram.addToPythonCompilerBenchmark(operation, durationPy);
		
		return outContent.toString()
	}
	
	def String javaCompilerComputeAndAssertOutAreAlike(JsonModel result, String operation){
		javaCompiler = new JavaCompiler(result)
		
		val startTimeJv = System.nanoTime;
		javaCompiler.compileAndRun
		val durationJv = System.nanoTime - startTimeJv;
		benchmarkProgram.addToJavaCompilerBenchmark(operation, durationJv);
		
		return outContent.toString()
	}
	
	def String javaInterpreterComputeAndAssertOutAreAlike(JsonModel result, String operation){
		javaInterpreter = new JavaInterpreter(result);
		
		val startTimeInt = System.nanoTime;
		javaInterpreter.interpretAndRun
		val durationInt = System.nanoTime - startTimeInt;
		benchmarkProgram.addToInterpreterBenchmark(operation, durationInt);
		
		return outContent.toString()
	}		
	
	def List<List<String>> getCsvToString(String path){
		val List<List<String>> records = new ArrayList();
		try (val BufferedReader br = new BufferedReader(new FileReader(path))) {
    		var String line = br.readLine();
    		while (line !== null) {
        		val String[] values = line.split(",");
        		records.add(Arrays.asList(values));
        		line = br.readLine();
    		}
    		br.close()
		}
		return records
	}
}
