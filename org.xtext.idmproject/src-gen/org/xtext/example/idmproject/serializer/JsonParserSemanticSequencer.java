/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.idmproject.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.idmproject.jsonParser.Expression;
import org.xtext.example.idmproject.jsonParser.GetValue;
import org.xtext.example.idmproject.jsonParser.Insert;
import org.xtext.example.idmproject.jsonParser.InsertLeft;
import org.xtext.example.idmproject.jsonParser.InsertRight;
import org.xtext.example.idmproject.jsonParser.Instruction;
import org.xtext.example.idmproject.jsonParser.JsonModel;
import org.xtext.example.idmproject.jsonParser.JsonParserPackage;
import org.xtext.example.idmproject.jsonParser.Load;
import org.xtext.example.idmproject.jsonParser.Modify;
import org.xtext.example.idmproject.jsonParser.Print;
import org.xtext.example.idmproject.jsonParser.Product;
import org.xtext.example.idmproject.jsonParser.Select;
import org.xtext.example.idmproject.jsonParser.Store;
import org.xtext.example.idmproject.jsonParser.Sum;
import org.xtext.example.idmproject.jsonParser.Value;
import org.xtext.example.idmproject.services.JsonParserGrammarAccess;

@SuppressWarnings("all")
public class JsonParserSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JsonParserGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JsonParserPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonParserPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case JsonParserPackage.GET_VALUE:
				sequence_GetValue(context, (GetValue) semanticObject); 
				return; 
			case JsonParserPackage.INSERT:
				sequence_Insert(context, (Insert) semanticObject); 
				return; 
			case JsonParserPackage.INSERT_LEFT:
				sequence_InsertLeft(context, (InsertLeft) semanticObject); 
				return; 
			case JsonParserPackage.INSERT_RIGHT:
				sequence_InsertRight(context, (InsertRight) semanticObject); 
				return; 
			case JsonParserPackage.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case JsonParserPackage.JSON_MODEL:
				sequence_JsonModel(context, (JsonModel) semanticObject); 
				return; 
			case JsonParserPackage.LOAD:
				sequence_Load(context, (Load) semanticObject); 
				return; 
			case JsonParserPackage.MODIFY:
				sequence_Modify(context, (Modify) semanticObject); 
				return; 
			case JsonParserPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case JsonParserPackage.PRODUCT:
				sequence_Product(context, (Product) semanticObject); 
				return; 
			case JsonParserPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case JsonParserPackage.STORE:
				sequence_Store(context, (Store) semanticObject); 
				return; 
			case JsonParserPackage.SUM:
				sequence_Sum(context, (Sum) semanticObject); 
				return; 
			case JsonParserPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (key=Key value=Value)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.EXPRESSION__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.EXPRESSION__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getKeyKeyParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getExpressionAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GetValue returns GetValue
	 *
	 * Constraint:
	 *     key=Key
	 */
	protected void sequence_GetValue(ISerializationContext context, GetValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.GET_VALUE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.GET_VALUE__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGetValueAccess().getKeyKeyParserRuleCall_1_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InsertLeft returns InsertLeft
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_InsertLeft(ISerializationContext context, InsertLeft semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.INSERT_LEFT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.INSERT_LEFT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertLeftAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InsertRight returns InsertRight
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_InsertRight(ISerializationContext context, InsertRight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.INSERT_RIGHT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.INSERT_RIGHT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertRightAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Insert returns Insert
	 *
	 * Constraint:
	 *     (key=Key expression=Expression)
	 */
	protected void sequence_Insert(ISerializationContext context, Insert semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.INSERT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.INSERT__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.INSERT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.INSERT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsertAccess().getKeyKeyParserRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getInsertAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     (
	 *         select=Select | 
	 *         store=Store | 
	 *         save=Save | 
	 *         print=Print | 
	 *         insert=Insert | 
	 *         insertL=InsertLeft | 
	 *         insertR=InsertRight | 
	 *         modify=Modify | 
	 *         compute=Compute | 
	 *         get=GetValue
	 *     )
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonModel returns JsonModel
	 *
	 * Constraint:
	 *     (baseLoad=Load instructions+=Instruction*)
	 */
	protected void sequence_JsonModel(ISerializationContext context, JsonModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Load returns Load
	 *
	 * Constraint:
	 *     file=File
	 */
	protected void sequence_Load(ISerializationContext context, Load semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.LOAD__FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.LOAD__FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadAccess().getFileFileParserRuleCall_1_0(), semanticObject.getFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Modify returns Modify
	 *
	 * Constraint:
	 *     (key=Key newExpression=Expression)
	 */
	protected void sequence_Modify(ISerializationContext context, Modify semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.MODIFY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.MODIFY__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.MODIFY__NEW_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.MODIFY__NEW_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModifyAccess().getKeyKeyParserRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getModifyAccess().getNewExpressionExpressionParserRuleCall_3_0(), semanticObject.getNewExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Print returns Print
	 *
	 * Constraint:
	 *     key=Key
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.PRINT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.PRINT__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getKeyKeyParserRuleCall_1_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Compute returns Product
	 *     Product returns Product
	 *
	 * Constraint:
	 *     (key1=Key key2=Key)
	 */
	protected void sequence_Product(ISerializationContext context, Product semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY1));
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductAccess().getKey1KeyParserRuleCall_0_0(), semanticObject.getKey1());
		feeder.accept(grammarAccess.getProductAccess().getKey2KeyParserRuleCall_2_0(), semanticObject.getKey2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Select returns Select
	 *
	 * Constraint:
	 *     key=Key
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.SELECT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.SELECT__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSelectAccess().getKeyKeyParserRuleCall_1_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Store returns Store
	 *
	 * Constraint:
	 *     file=File
	 */
	protected void sequence_Store(ISerializationContext context, Store semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.STORE__FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.STORE__FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoreAccess().getFileFileParserRuleCall_1_0(), semanticObject.getFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Compute returns Sum
	 *     Sum returns Sum
	 *
	 * Constraint:
	 *     (key1=Key key2=Key)
	 */
	protected void sequence_Sum(ISerializationContext context, Sum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY1));
			if (transientValues.isValueTransient(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonParserPackage.Literals.COMPUTE__KEY2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSumAccess().getKey1KeyParserRuleCall_0_0(), semanticObject.getKey1());
		feeder.accept(grammarAccess.getSumAccess().getKey2KeyParserRuleCall_2_0(), semanticObject.getKey2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (stringValue=STRING | integerValue=INT | array=Array)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
