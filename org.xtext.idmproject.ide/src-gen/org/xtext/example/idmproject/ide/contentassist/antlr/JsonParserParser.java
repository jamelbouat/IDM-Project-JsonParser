/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.idmproject.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.idmproject.ide.contentassist.antlr.internal.InternalJsonParserParser;
import org.xtext.example.idmproject.services.JsonParserGrammarAccess;

public class JsonParserParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JsonParserGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JsonParserGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getComputeAccess().getAlternatives_0(), "rule__Compute__Alternatives_0");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getArrayAccess().getAlternatives(), "rule__Array__Alternatives");
			builder.put(grammarAccess.getJsonModelAccess().getGroup(), "rule__JsonModel__Group__0");
			builder.put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
			builder.put(grammarAccess.getSaveAccess().getGroup(), "rule__Save__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getGetValueAccess().getGroup(), "rule__GetValue__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getUpdateAccess().getGroup(), "rule__Update__Group__0");
			builder.put(grammarAccess.getComputeAccess().getGroup(), "rule__Compute__Group__0");
			builder.put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
			builder.put(grammarAccess.getProductAccess().getGroup(), "rule__Product__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_0(), "rule__Array__Group_0__0");
			builder.put(grammarAccess.getArrayAccess().getGroup_1(), "rule__Array__Group_1__0");
			builder.put(grammarAccess.getJsonModelAccess().getBaseLoadAssignment_0(), "rule__JsonModel__BaseLoadAssignment_0");
			builder.put(grammarAccess.getJsonModelAccess().getInstructionsAssignment_1(), "rule__JsonModel__InstructionsAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getSelectAssignment_0(), "rule__Instruction__SelectAssignment_0");
			builder.put(grammarAccess.getInstructionAccess().getStoreAssignment_1(), "rule__Instruction__StoreAssignment_1");
			builder.put(grammarAccess.getInstructionAccess().getSaveAssignment_2(), "rule__Instruction__SaveAssignment_2");
			builder.put(grammarAccess.getInstructionAccess().getPrintAssignment_3(), "rule__Instruction__PrintAssignment_3");
			builder.put(grammarAccess.getInstructionAccess().getInsertAssignment_4(), "rule__Instruction__InsertAssignment_4");
			builder.put(grammarAccess.getInstructionAccess().getUpdateAssignment_5(), "rule__Instruction__UpdateAssignment_5");
			builder.put(grammarAccess.getInstructionAccess().getComputeAssignment_6(), "rule__Instruction__ComputeAssignment_6");
			builder.put(grammarAccess.getInstructionAccess().getGetAssignment_7(), "rule__Instruction__GetAssignment_7");
			builder.put(grammarAccess.getLoadAccess().getFileAssignment_1(), "rule__Load__FileAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getIdAssignment_1(), "rule__Select__IdAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getKeyAssignment_3(), "rule__Select__KeyAssignment_3");
			builder.put(grammarAccess.getStoreAccess().getFileAssignment_1(), "rule__Store__FileAssignment_1");
			builder.put(grammarAccess.getPrintAccess().getKeyAssignment_1(), "rule__Print__KeyAssignment_1");
			builder.put(grammarAccess.getGetValueAccess().getKeyAssignment_1(), "rule__GetValue__KeyAssignment_1");
			builder.put(grammarAccess.getInsertAccess().getKeyAssignment_1(), "rule__Insert__KeyAssignment_1");
			builder.put(grammarAccess.getInsertAccess().getValueAssignment_3(), "rule__Insert__ValueAssignment_3");
			builder.put(grammarAccess.getUpdateAccess().getKeyAssignment_1(), "rule__Update__KeyAssignment_1");
			builder.put(grammarAccess.getUpdateAccess().getNewValueAssignment_3(), "rule__Update__NewValueAssignment_3");
			builder.put(grammarAccess.getSumAccess().getKey1Assignment_1(), "rule__Sum__Key1Assignment_1");
			builder.put(grammarAccess.getSumAccess().getKey2Assignment_3(), "rule__Sum__Key2Assignment_3");
			builder.put(grammarAccess.getProductAccess().getKey1Assignment_1(), "rule__Product__Key1Assignment_1");
			builder.put(grammarAccess.getProductAccess().getKey2Assignment_3(), "rule__Product__Key2Assignment_3");
			builder.put(grammarAccess.getExpressionAccess().getKeyAssignment_0(), "rule__Expression__KeyAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getValueAssignment_2(), "rule__Expression__ValueAssignment_2");
			builder.put(grammarAccess.getValueAccess().getStringValueAssignment_0(), "rule__Value__StringValueAssignment_0");
			builder.put(grammarAccess.getValueAccess().getIntegerValueAssignment_1(), "rule__Value__IntegerValueAssignment_1");
			builder.put(grammarAccess.getValueAccess().getArrayAssignment_2(), "rule__Value__ArrayAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JsonParserGrammarAccess grammarAccess;

	@Override
	protected InternalJsonParserParser createParser() {
		InternalJsonParserParser result = new InternalJsonParserParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JsonParserGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JsonParserGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
